dependencies {
    compile "commons-io:commons-io:${commons_io_version}"
    compile "net.java.dev.jna:jna:${jna_version}"
    compile "org.slf4j:slf4j-api:${slf4j_version}"
    compile project(":api")

    testCompile "org.testng:testng:${testng_version}"
    testCompile "org.slf4j:slf4j-simple:${slf4j_version}"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'build/generated-src']
        }
    }
}

checkstyleMain.source = 'src/main/java'
pmdMain.source = 'src/main/java'

task jnarator(dependsOn: ":jnarator:jar") {
    doLast {
        File jnaGenerator = project(":jnarator").jar.outputs.files.singleFile
        javaexec {
            main = "-jar"
            args = [
                    jnaGenerator.absolutePath,
                    "-l",
                    "mxnet",
                    "-p",
                    "org.apache.mxnet.jna",
                    "-o",
                    "${project.buildDir}/generated-src",
                    "-m",
                    "${project.projectDir}/src/main/jna/mapping.properties",
                    "-f",
                    "src/main/include/mxnet/c_api.h",
                    "src/main/include/nnvm/c_api.h",
                    "src/main/include/mxnet/c_predict_api.h"
            ]
        }
    }
}

import java.util.regex.Matcher
import java.util.regex.Pattern

def checkForUpdate(String path, String url){
    def expected = new URL(url).text
    def actual = new File("src/main/include/${path}").text
    if (!actual.equals(expected)) {
        (new File("build/" + path.replaceAll("[/\\\\]", '_'))).text = expected
        logger.warn("[\033[31mWARN\033[0m ] Header file has been changed in open source project: ${path}.")
    }
}

task checkHeaderFile() {
    if (gradle.startParameter.offline) {
        logger.warn("[\033[31mWARN\033[0m ] Ignore header validation in offline mode.")
        return
    }

    def mxnetUrl = "https://raw.githubusercontent.com/apache/incubator-mxnet/master/"
    checkForUpdate("mxnet/c_api.h", "${mxnetUrl}/include/mxnet/c_api.h")
    checkForUpdate("mxnet/c_predict_api.h", "${mxnetUrl}/include/mxnet/c_predict_api.h")
    def content = new URL("https://github.com/apache/incubator-mxnet/tree/master/3rdparty").text

    Pattern pattern = Pattern.compile("href=\"/dmlc/tvm/tree/([a-z0-9]+)\"")
    Matcher m = pattern.matcher(content);
    if (!m.find()) {
        throw new GradleException("Failed to retrieve submodule hash for tvm from github")
    }
    String hash = m.group(1);

    def nnvmUrl = "https://raw.githubusercontent.com/dmlc/tvm/${hash}"
    checkForUpdate("nnvm/c_api.h", "${nnvmUrl}/nnvm/include/nnvm/c_api.h")
}

compileJava.dependsOn(jnarator)
check.dependsOn checkHeaderFile
