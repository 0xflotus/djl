apply plugin: 'com.android.library'

def pytorch_version = "1.5.0"
android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['jnilib/']
        }
    }

}

task processResources {
    doLast {
        def url = "https://djl-ai.s3.amazonaws.com/publish/pytorch-${pytorch_version}/jnilib/android"
        def abis = ["armeabi-v7a", "arm64-v8a", "x86", "x86_64"]
        abis.each { abi ->
            def downloadPath = new URL("${url}/${abi}/libdjl_torch.so")
            def file = file("${project.projectDir}/jnilib/${abi}/libdjl_torch.so")
            if (!file.exists()) {
                project.logger.lifecycle("${url}/${abi}/libdjl_torch.so")
                file.getParentFile().mkdirs()
                downloadPath.withInputStream { i -> file.withOutputStream { it << i } }
            }
        }
    }
}

assemble.dependsOn processResources
