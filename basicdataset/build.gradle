plugins {
    id 'maven-publish'
    id 'signing'
}

repositories {
    maven {
        url 'https://djl-ai.s3.amazonaws.com/dev'
    }
}

def classifier = getClassifier()

dependencies {
    compile "org.slf4j:slf4j-api:${slf4j_version}"
    compile project(":repository")

    testCompile ("org.testng:testng:${testng_version}") {
        exclude group: "junit", module: "junit"
    }
    testCompile "org.slf4j:slf4j-simple:${slf4j_version}"

    testCompile project(":mxnet:engine")
    testRuntime "ai.djl.mxnet:mxnet-native-mkl:1.6.0-SNAPSHOT:${classifier}"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

if (shouldSign()) {
    signing {
        useGpgCmd()
        sign publishing.publications
    }
}

task syncS3(type:Exec) {
    commandLine "sh", "-c", "find . -name .DS_Store | xargs rm && aws s3 sync src/test/resources/mlrepo s3://djl-ai/mlrepo --acl public-read"

    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId project.getGroup()
            artifactId project.getName()
            version rootProject.getVersion()
            from components.java
            artifacts = [jar, javadocJar, sourcesJar]
            pom standardPom({
                name = "Basic Dataset"
                delegate.description = "Basic Dataset for djl.ai"
                url = url.get() + "basicdataset"
            })
        }
    }
    repositories {
        maven publishRepository()
    }
}
