/**
 * This build file is used by djl.ai project internally.
 */

plugins {
    id 'application'
    id 'maven-publish'
}

repositories {
    maven {
        url 'https://djl-ai.s3.amazonaws.com/dev'
    }
}

def classifier = getClassifier()

dependencies {
    compile "commons-cli:commons-cli:${commons_cli_version}"
    compile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_slf4j_version}"
    compile "com.google.code.gson:gson:${gson_version}"
    compile project(":api")
    compile project(":basicdataset")
    compile project(":model-zoo")
    compile project(":mxnet:mxnet-model-zoo")

    runtime "ai.djl.mxnet:mxnet-native-mkl:1.6.0-SNAPSHOT:${classifier}"

    testCompile ("org.testng:testng:${testng_version}") {
        exclude group: "junit", module: "junit"
    }
}


task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId project.getGroup()
            artifactId project.getName()
            version rootProject.getVersion()
            from components.java
            artifacts = [jar, sourcesJar, javadocJar]
            pom {
                name = "Deeplearning Java Library - Examples"
                description = "Examples for djl.ai"
                url = "http://www.djl.ai/examples"
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
            }
            pom.withXml {
                Node pomNode = asNode()
                pomNode.dependencies.'*'.findAll() {
                    it.artifactId.text() == 'mxnet-native-mkl'
                }.each() {
                    it.parent().remove(it)
                }
            }
        }
    }
    repositories {
        maven publishRepository()
    }
}

application {
    mainClassName = System.getProperty("main", "ai.djl.examples.inference.ClassifyExample")
}

run{
    systemProperties System.getProperties()
}

tasks.distTar.enabled = false
