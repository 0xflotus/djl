group "ai.djl.sentencepiece"

dependencies {
    api project(":api")

    testImplementation("org.testng:testng:${testng_version}") {
        exclude group: "junit", module: "junit"
    }

    testImplementation "org.slf4j:slf4j-simple:${slf4j_version}"
}


test {
    environment "PATH", "src/test/bin:${environment.PATH}"
}


apply from: file("${rootProject.projectDir}/tools/gradle/cpp-formatter.gradle")

def downloadBuild(String os) {
    exec {
        if (os == "win") {
            throw new IllegalStateException("Not supported for Windows")
        } else {
            commandLine 'bash', 'native/build.sh'
        }
    }
    def classifier = "${os}-x86_64"
    def publishDir = "${project.projectDir}/build/jnilib/${classifier}"
    copy {
        def tree = fileTree("${project.projectDir}/native/build")
        tree.include("**/libsentencepiece_native.*", "**/entencepiece_native.dll")
        from tree.files
        into publishDir
    }
    def VERSION = "0.1.92"
    def versionName = String.format("${VERSION}-%s", new Date().format('yyyyMMdd'))
    def propFile = file("${publishDir}/sentencepiece.properties")
    propFile.text = "version=${versionName}\n"
    // for nightly ci
    def ciDir = "${project.projectDir}/jnilib/${classifier}"
    copy {
        from publishDir
        into ciDir
    }
}

task compileJNI {
    doFirst {
        if (System.properties['os.name'].toLowerCase(Locale.ROOT).contains("windows")) {
            downloadBuild("win")
        } else if (System.properties['os.name'].toLowerCase(Locale.ROOT).contains("mac")) {
            downloadBuild("osx")
        } else if (System.properties['os.name'].toLowerCase(Locale.ROOT).contains("linux")) {
            downloadBuild("linux")
        } else {
            throw new IllegalStateException("Unknown Architecture " + System.properties['os.name'])
        }
    }
}