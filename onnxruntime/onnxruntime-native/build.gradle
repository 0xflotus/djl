group "ai.djl.onnxruntime"

def BINARY_ROOT = "${project.buildDir}/download"

task downloadOrtNativeLib() {
    doLast {
        def url = "https://djl-ai.s3.amazonaws.com/publish/onnxruntime-${onnxruntime_version}"
        def files = [
                "Linux/cpu"    : "cpu/linux",
                "macOS/cpu"    : "cpu/osx"
        ]
        def downloadedJar = "onnxruntime-${onnxruntime_version}.jar"
        files.each { entry ->
            project.logger.lifecycle("Downloading ${url}/${entry.key}/${downloadedJar}")
            def outputDir = new File("${BINARY_ROOT}/${entry.value}/native/lib")
            def file = new File("${outputDir}/${downloadedJar}")
            file.getParentFile().mkdirs()
            new URL("${url}/${entry.key}/${downloadedJar}").withInputStream { i -> file.withOutputStream { it << i } }
            copy {
                from(zipTree(file)) {
                    include "ai/onnxruntime/native/**"
                    eachFile { fcd ->
                        fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(4))
                    }
                    includeEmptyDirs = false
                }
                into outputDir
            }
            delete(file)
        }
    }
}

def flavorNames = file(BINARY_ROOT).list() ?: []
flavorNames.each { flavor ->

    def platformNames = file("${BINARY_ROOT}/${flavor}").list() ?: []

    def artifactsNames = []

    platformNames.each { osName ->
        tasks.create(name: "${flavor}-${osName}Jar", type: Jar) {
            doFirst {
                def propFile = file("${BINARY_ROOT}/${flavor}/${osName}/native/lib/onnxruntime.properties")
                propFile.delete()
                def dsStore = file("${BINARY_ROOT}/${flavor}/${osName}/native/lib/.DS_Store")
                dsStore.delete()

                def versionName = String.format("${version}-%s", new Date().format('yyyyMMdd'))
                def dir = file("${BINARY_ROOT}/${flavor}/${osName}/native/lib")
                def sb = new StringBuilder()
                sb.append("version=${versionName}\nclassifier=${flavor}-${osName}-x86_64\nlibraries=")
                def first = true
                for (String name : dir.list().sort()) {
                    if (first) {
                        first = false
                    } else {
                        sb.append(',')
                    }
                    sb.append(name)
                }
                propFile.text = sb.toString()
                def metaInf = new File("${BINARY_ROOT}/${flavor}/${osName}/META-INF")
                metaInf.mkdirs()
                def licenseFile = new File(metaInf, "LICENSE")
                licenseFile.text = new URL("https://raw.githubusercontent.com/microsoft/onnxruntime/master/LICENSE").text
            }
            from file("${BINARY_ROOT}/${flavor}/${osName}")
            archiveClassifier = "${osName}-x86_64"
        }
        artifactsNames.add(tasks["${flavor}-${osName}Jar"])
    }

    // Only publish if the project directory equals the current directory
    // This means that publishing from the main project does not publish the native jars
    // and the native jars have to be published separately
    if (project.getProjectDir().toString() == System.getProperty("user.dir")) {
        publishing.publications.create("${flavor}", MavenPublication) {
            artifactId "onnxruntime-native-${flavor}"
            from components.java
            artifacts = artifactsNames
            artifact jar
            artifact javadocJar
            artifact sourcesJar
            pom {
                name = "ONNX Runtime native library"
                description = "ONNXRuntime Engine native library binary distribution"
                url = "http://www.djl.ai/onnxruntime/onnxruntime-native"
                packaging = "jar"

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0'
                    }
                }

                scm {
                    connection = "scm:git:git@github.com:awslabs/djl.git"
                    developerConnection = "scm:git:git@github.com:awslabs/djl.git"
                    url = "https://github.com/awslabs/djl"
                    tag = "HEAD"
                }

                developers {
                    developer {
                        name = "DJL.AI Team"
                        email = "djl-dev@amazon.com"
                        organization = "Amazon AI"
                        organizationUrl = "https://amazon.com"
                    }
                }
            }
        }
    }
}