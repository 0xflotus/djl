plugins {
    id 'maven-publish'
}

dependencies {
    compile "org.slf4j:slf4j-api:${slf4j_version}"

    testCompile ("org.testng:testng:${testng_version}") {
        exclude group: "junit", module: "junit"
    }
    testCompile "org.slf4j:slf4j-simple:${slf4j_version}"
    testCompile "org.powermock:powermock-module-testng:${powermock_version}"
    testCompile "org.powermock:powermock-api-mockito2:${powermock_version}"
}

javadoc {
    title "Deeplearning Java Library ${project.version} API specification"
    exclude "ai/djl/util/**"
    exclude "ai/djl/ndarray/internal/**"
    options.overview "src/main/javadoc/overview.html"
    options.addBooleanOption("-allow-script-in-comments",true)
    options.header "<script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

task uploadJavadoc(type:Exec) {
    commandLine "sh", "-c", "find . -name .DS_Store | xargs rm && aws s3 sync build/docs/javadoc s3://djl-ai/java-api/${version} --acl public-read"

    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId project.getGroup()
            artifactId project.getName()
            version rootProject.getVersion()
            from components.java
            artifacts = [jar, javadocJar, sourcesJar]
            pom {
                name = "Deeplearning Java Library - core API"
                description = "A Deeplearning API in Java"
                url = "http://www.djl.ai/api"
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
            }
        }
    }
    repositories {
        maven publishRepository()
    }
}
