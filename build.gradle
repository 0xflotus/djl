plugins {
    id "com.github.spotbugs" version "2.0.0" apply false
}

// workaround gradle bug
ext.SpotBugsTask = com.github.spotbugs.SpotBugsTask

defaultTasks 'build'

allprojects {
    group 'ai.djl'
    boolean isRelease = project.hasProperty("release") || project.findProperty("publishTo") == "staging"
    version = "0.2.0" + (isRelease ? "" : "-SNAPSHOT")

    repositories {
        jcenter()
    }

    apply plugin: 'idea'
    idea {
        module {
            outputDir = file('build/classes/java/main')
            testOutputDir = file('build/classes/java/test')
            // inheritOutputDirs = true
        }
    }
}

def javaProjects() {
    return subprojects.findAll();
}

configure(javaProjects()) {
    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

	apply from: file("${rootProject.projectDir}/tools/gradle/formatter.gradle")
	apply from: file("${rootProject.projectDir}/tools/gradle/check.gradle")

    test {
        maxHeapSize = "1024m"

        useTestNG() {
            // suiteXmlFiles << new File(rootDir, "testng.xml") //This is how to add custom testng.xml
        }

        testLogging {
            showStandardStreams = true
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }

        doFirst {
            systemProperty "ai.djl.logging.level", "debug"
            systemProperty "disableProgressBar", "true"
            if (gradle.startParameter.offline) {
                systemProperty "offline", "true"
            }
        }
    }

    compileJava {
        options.compilerArgs << "-proc:none" << "-Xlint:all,-options,-static" << "-Werror"
    }

    compileTestJava {
        options.compilerArgs << "-proc:none" << "-Xlint:all,-options,-static" << "-Werror"
    }
}

configure([project(':api'), project(':basicdataset'), project(':model-zoo'), project(':repository'), project(':mxnet:mxnet-engine'), project(':mxnet:mxnet-model-zoo') ]) {
    javadoc {
        title "Deep Java Library ${version} - ${project.name} API"
        options.addBooleanOption("-allow-script-in-comments", true)
        options.header "<script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>"
    }

    task uploadJavadoc(type: Exec) {
        commandLine "sh", "-c", "find . -name .DS_Store | xargs rm && aws s3 sync build/docs/javadoc s3://djl-ai/java-api/${version}/${project.name} > build/upload.log"
    }
}

def getClassifier() {
    String osName = System.getProperty("os.name")
    String osPrefix;
    if (osName.startsWith("Win")) {
        osPrefix = "win"
    } else if (osName.startsWith("Mac")) {
        osPrefix = "osx"
    } else if (osName.startsWith("Linux")) {
        osPrefix = "linux"
    } else {
        throw new GradleException("Unsupported os: " + osName)
    }
    return osPrefix + "-x86_64"
}

def shouldSign() {
    return project.findProperty("publishTo") in ["staging", "snapshot"]
}

Closure publishRepository() {
    def publishTo = project.findProperty("publishTo")

    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
        if (publishTo != null || gradle.startParameter.taskNames.contains("publish")) {
            throw new GradleException("JDK 1.8 is required to compile java class to be published.")
        }
        return {}
    }

    switch(publishTo) {
        case "local": return {
            name "local"
            url project.rootProject.buildDir.toPath().resolve("repo").toAbsolutePath().toString()
        }
        case "S3": return {
            name = "s3"
            url = "s3://djl-ai/dev"
            authentication {
                awsIm(AwsImAuthentication)
            }
        }
        case "snapshot": return {
            name = "snapshot"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            credentials {
                username = ossrhUsername
                password = ossrhPassword
            }
        }
        case "staging": return {
            name = "staging"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = ossrhUsername
                password = ossrhPassword
            }
        }
        default:
            if (gradle.startParameter.taskNames.contains("publish")) {
                if (publishTo == null) {
                    throw new GradleException("Please specify publishTo property for publish task: gradle publish -PpublishTo=XXX")
                }
                throw new GradleException("Unknown publishTo: ${publishTo}. Supported target: [staging, snapshot, s3, local]")
            }
            return {}
    }
}

Closure standardPom(Closure base) {
    return {

        packaging = "jar"
        url = "http://www.djl.ai/"

        base.setDelegate(delegate)
        base()

        licenses {
            license {
                name = 'The Apache License, Version 2.0'
                url = 'https://www.apache.org/licenses/LICENSE-2.0'
            }
        }

        scm {
            connection = "scm:git:git@github.com:awslabs/djl.git"
            developerConnection = "scm:git:git@github.com:awslabs/djl.git"
            url = "https://github.com/awslabs/djl"
            tag = "HEAD"
        }

        developers {
            developer {
                name = "DJL.AI Team"
                email = "djl-dev@amazon.com"
                organization = "Amazon"
                organizationUrl = "https://amazon.com"
            }
        }

        name = "Deep Java Library - " + name.get()
    }
}
