plugins {
    id "com.github.spotbugs" version "2.0.0" apply false
}

// workaround gradle bug
ext.SpotBugsTask = com.github.spotbugs.SpotBugsTask

defaultTasks 'build'

allprojects {
    group 'ai.djl'
    version = "0.2.0" + (project.hasProperty("release") ? "" : "-SNAPSHOT")

    repositories {
        jcenter()
    }

    apply plugin: 'idea'
    idea {
        module {
            outputDir = file('build/classes/java/main')
            testOutputDir = file('build/classes/java/test')
            // inheritOutputDirs = true
        }
    }
}

def javaProjects() {
    return subprojects.findAll();
}

configure(javaProjects()) {
    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

	apply from: file("${rootProject.projectDir}/tools/gradle/formatter.gradle")
	apply from: file("${rootProject.projectDir}/tools/gradle/check.gradle")

    test {
        maxHeapSize = "1024m"

        useTestNG() {
            // suiteXmlFiles << new File(rootDir, "testng.xml") //This is how to add custom testng.xml
        }

        testLogging {
            showStandardStreams = true
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }

        doFirst {
            systemProperty "ai.djl.logging.level", "debug"
            systemProperty "disableProgressBar", "true"
            if (gradle.startParameter.offline) {
                systemProperty "offline", "true"
            }
        }
    }

    compileJava {
        options.compilerArgs << "-proc:none" << "-Xlint:all,-options,-static" << "-Werror"
    }

    compileTestJava {
        options.compilerArgs << "-proc:none" << "-Xlint:all,-options,-static" << "-Werror"
    }
}

def getClassifier() {
    String osName = System.getProperty("os.name")
    String osPrefix;
    if (osName.startsWith("Win")) {
        osPrefix = "win"
    } else if (osName.startsWith("Mac")) {
        osPrefix = "osx"
    } else if (osName.startsWith("Linux")) {
        osPrefix = "linux"
    } else {
        throw new GradleException("Unsupported os: " + osName)
    }
    return osPrefix + "-x86_64"
}

def shouldSign() {
    return project.findProperty("publishTo") != null
}

Closure publishRepository() {
    def publishTo = project.findProperty("publishTo")
    switch(publishTo) {
        case "local": return {
            name "local"
            url project.rootProject.buildDir.toPath().resolve("repo").toAbsolutePath().toString()
        }
        case "S3": return {
            name = "s3"
            url = "s3://djl-ai/dev"
            authentication {
                awsIm(AwsImAuthentication)
            }
        }
        case "snapshot": return {
            name = "snapshot"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            authentication(userName: ossrhUsername, password: ossrhPassword)
        }
        case "staging": return {
            name = "staging"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            authentication(userName: ossrhUsername, password: ossrhPassword)
        }
        default:
            if (tasks.withType(PublishToMavenRepository).find {gradle.taskGraph.hasTask it} ) {
                throw new GradleException("Unknown publishTo Repository")
            } else {
                return {}
            }
    }
}

Closure standardPom(Closure base) {
    return {

        packaging = "jar"
        url = "http://www.djl.ai/"

        base.setDelegate(delegate)
        base()

        licenses {
            license {
                name = 'The Apache License, Version 2.0'
                url = 'https://www.apache.org/licenses/LICENSE-2.0'
            }
        }

        scm {
            connection = "scm:git:git@github.com:awslabs/djl.git"
            developerConnection = "scm:git:git@github.com:awslabs/djl.git"
            url = "https://github.com/awslabs/djl"
            tag = "HEAD"
        }

        developers {
            developer {
                name = "DJL.AI Team"
                email = "djl-dev@amazon.com"
                organization = "Amazon"
                organizationUrl = "https://amazon.com"
            }
        }

        name = "Deeplearning Java Library - " + name.get()

    }
}
